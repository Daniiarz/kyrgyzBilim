version: "3.8"

networks:
  overlay:
    driver: overlay

volumes:
  postgres-data:
  media:
  static:

configs:
  traefik-config:
    file: config/traefik.yaml
  nginx-config:
    file: config/static_server.nginx

secrets:
  env-file:
    name: env-file
    file: secrets/.env


services:
  traefik:
    image: traefik:v2.2
    networks:
      - overlay
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    configs:
      - source: traefik-config
        target: /etc/traefik/traefik.yaml
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager

  nginx:
    image: nginx:1-alpine
    networks:
      - overlay
    volumes:
      - media:/usr/share/nginx/html/media
      - static:/usr/share/nginx/html/static
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.nginx.entrypoints=http"
        - "traefik.http.routers.nginx.rule=Host(`159.89.29.83`) && PathPrefix(`/media`, `/static`)"
        - "traefik.http.services.nginx.loadbalancer.server.port=80"
      restart_policy:
        condition: any

  app:
    image: 127.0.0.1:5000/app
    build:
      target: prod
      context: KyrgyzBilimApi/
    environment:
      - POSTGRES_PASSWORD=dbCXeDTR5vFhZkxRCq
      - POSTGRES_DB=kyrgyzBilim
      - POSTGRES_USER=kyrgyzBilim
      - POSTGRES_HOST=postgres
      - MEDIA_URL=http://localhost/media
    secrets:
      - source: env-file
        target: /usr/src/app/.env
    networks:
      - overlay
    volumes:
      - media:/go/src/app/media/
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.app.entrypoints=http"
        - "traefik.http.routers.app.rule=Host(`159.89.29.83`)"
        - "traefik.http.services.app.loadbalancer.server.port=8080"
      restart_policy:
        condition: any
        delay: 5s

  postgres:
    image: postgres:12-alpine
    environment:
      - POSTGRES_PASSWORD=dbCXeDTR5vFhZkxRCq
      - POSTGRES_DB=kyrgyzBilim
      - POSTGRES_USER=kyrgyzBilim
    secrets:
      - source: env-file
        target: /usr/src/secrects/.env
    networks:
      - overlay
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager

    volumes:
      - postgres-data:/var/lib/postgresql/data

  admin:
    image: 127.0.0.1:5000/admin
    build:
      context: ../KyrgyzBilimAdmin/
    secrets:
      - source: env-file
        target: /usr/src/admin/.env
    networks:
      - overlay
    volumes:
      - static:/usr/src/admin/static/
      - media:/usr/src/admin/media/
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.admin.entrypoints=http"
        - "traefik.http.routers.admin.rule=Host(`159.89.29.83`) && PathPrefix(`/admin`)"
        - "traefik.http.services.admin.loadbalancer.server.port=8000"
      restart_policy:
        condition: any
        delay: 5s
